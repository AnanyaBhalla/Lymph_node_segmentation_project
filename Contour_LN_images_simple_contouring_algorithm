{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4b1c3d97-3544-48a7-a184-64a6b3f85461",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import necessary modules\n",
    "import os\n",
    "import glob\n",
    "import cv2\n",
    "import numpy as np\n",
    "import openslide\n",
    "from openslide import OpenSlide\n",
    "import shutil\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b894e20-b5d6-470d-9077-2692a113f350",
   "metadata": {},
   "source": [
    "simple contouring algorithm by smuLymphnet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9fc71883-c1c4-4272-b59d-3e4937f7813a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parameters\n",
    "bilateral1_args={\"d\":9,\"sigmaColor\":10000,\"sigmaSpace\":150}\n",
    "bilateral2_args={\"d\":90,\"sigmaColor\":5000,\"sigmaSpace\":5000}\n",
    "bilateral3_args={\"d\":90,\"sigmaColor\":10000,\"sigmaSpace\":10000}\n",
    "bilateral4_args={\"d\":90,\"sigmaColor\":10000,\"sigmaSpace\":100}\n",
    "thresh1_args={\"thresh\":0,\"maxval\":255,\"type\":cv2.THRESH_TRUNC+cv2.THRESH_OTSU}\n",
    "thresh2_args={\"thresh\":0,\"maxval\":255,\"type\":cv2.THRESH_OTSU}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "091cc5ab-f238-4afb-bb96-07cb0ae8df7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#define function for contouring the lymph node units in a whole slide image (wsis)\n",
    "def get_lymphnode_contours(wsi):\n",
    "\n",
    "    #filter the colour\n",
    "    #conver the image to HSV colour space\n",
    "    img_hsv = cv2.cvtColor(wsi,cv2.COLOR_RGB2HSV)\n",
    "    #define the lower and upper bounds of the red colours HSV\n",
    "    lower_red = np.array([120,0,0])\n",
    "    upper_red = np.array([180,255,255])\n",
    "\n",
    "    #create mask to filter our red colour\n",
    "    mask = cv2.inRange(img_hsv,lower_red,upper_red)\n",
    "\n",
    "    #change back to RGB colour zone\n",
    "    img_hsv = cv2.cvtColor(img_hsv,cv2.COLOR_HSV2RGB)\n",
    "\n",
    "    #apply maks back to the original image\n",
    "    m = cv2.bitwise_and(wsi,wsi,mask=mask)\n",
    "    #get backround colour and to fill it back \n",
    "    im_fill = np.where(m==0,233,m) \n",
    "    #build black square same size as thumbnail\n",
    "    mask = np.zeros(wsi.shape) \n",
    "    #convert mask to 2d (0,1)\n",
    "    gray = cv2.cvtColor(im_fill,cv2.COLOR_BGR2GRAY) \n",
    "    \n",
    "    #generate the blur\n",
    "    blur1 = cv2.bilateralFilter(np.bitwise_not(gray),**bilateral1_args)\n",
    "    #step2: make the pixeldist and sigma space larger so that the content can be linked together\n",
    "    blur2 = cv2.bilateralFilter(np.bitwise_not(blur1),**bilateral2_args)\n",
    "    #step3: make each lymph node looks mor like a group\n",
    "    blur3 = cv2.bilateralFilter(np.bitwise_not(blur2),**bilateral3_args)\n",
    "    #step4: contain more color as possible\n",
    "    blur4 = cv2.bilateralFilter(np.bitwise_not(blur3),**bilateral4_args)\n",
    "    #invert the final blurred image\n",
    "    blur_final = 255-blur4\n",
    "    #threshold twice\n",
    "    _,thresh = cv2.threshold(blur_final,**thresh1_args)\n",
    "    _,thresh = cv2.threshold(thresh,**thresh2_args)\n",
    "    #find contours\n",
    "    contours, _ = cv2.findContours(thresh,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\n",
    "    #filter small contours\n",
    "    contours = list(filter(lambda x: cv2.contourArea(x) > 5000, contours))\n",
    "\n",
    "    #return the filtered contours\n",
    "    return contours "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa66336d-9c4a-4b65-be20-934f2f099dac",
   "metadata": {},
   "source": [
    "Upload the raw WSIs data and filter to only include the ndpi formatted wsis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "28d8968b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "208\n",
      "178\n",
      "178\n"
     ]
    }
   ],
   "source": [
    "#add all the image directories into a list called image paths\n",
    "image_paths =glob.glob(\"folder_with_images/*/*\")\n",
    "\n",
    "# Filter out only the ndpi formats of the images\n",
    "image_paths_ndpi = [i for i in image_paths if \".ndpi\" in i]\n",
    "\n",
    "# Print the number of ndpi images\n",
    "print(\"Number of ndpi images:\", len(image_paths_ndpi))\n",
    "\n",
    "# Loop through the list of image paths and open each image with OpenSlide\n",
    "openslide_paths = []  # List to store all the OpenSlide files\n",
    "names = []  # List to store the names of each file\n",
    "\n",
    "# Iterate through the list containing the image paths\n",
    "for image_path in image_paths_ndpi:\n",
    "    # Use OpenSlide to open the images\n",
    "    wsi = OpenSlide(image_path)  # loads a single image\n",
    "    \n",
    "    # Append the opened image into the openslide_paths list\n",
    "    openslide_paths.append(wsi)\n",
    "    \n",
    "    # Replace spaces in the file names with underscores\n",
    "    name = os.path.basename(image_path).replace(\" \", \"_\")\n",
    "    \n",
    "    # Append the names for the corresponding file into the names list\n",
    "    names.append(name)\n",
    "\n",
    "# Print the number of names (should match the number of ndpi images)\n",
    "print(\"Number of names:\", len(names))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26c3d314-f1a8-4328-8b8a-faf8a3c04199",
   "metadata": {},
   "source": [
    "Use the contouring algorithm to contour the lymph nodes on each wsis and upload to folder "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b06dfd0d-c89e-4d71-8b8b-cbbc33bebe83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "064805-11.ndpi\n",
      "064805-21.ndpi\n",
      "066299-16.ndpi\n",
      "066299-2.ndpi\n",
      "094430-13.ndpi\n",
      "084395-10,111.ndpi\n",
      "094430-2.ndpi\n",
      "094970-13.ndpi\n",
      "086747-41.ndpi\n",
      "095760-4.ndpi\n",
      "095760-9.ndpi\n",
      "086747-101.ndpi\n",
      "096030-21.ndpi\n",
      "096030-7.ndpi\n",
      "090999-19,201.ndpi\n",
      "100216-14,1.ndpi\n",
      "100216-6.ndpi\n",
      "100721-1,2.ndpi\n",
      "101812-11.ndpi\n",
      "101812-5.ndpi\n",
      "090999-31.ndpi\n",
      "102023-21.ndpi\n",
      "102151-8.ndpi\n",
      "103047-14,10.ndpi\n",
      "092797-21.ndpi\n",
      "103272-4,1.ndpi\n",
      "106123-1.ndpi\n",
      "106123-6,8.ndpi\n",
      "108271-13.ndpi\n",
      "092797-28,261.ndpi\n",
      "108271-2.ndpi\n",
      "109038-26,1.ndpi\n",
      "109158-17.ndpi\n",
      "109158-6.ndpi\n",
      "076504-291.ndpi\n",
      "113383-1,2.ndpi\n",
      "114690-114593.ndpi\n",
      "114749-114611.ndpi\n",
      "120565-120493.ndpi\n",
      "121483-1,2.ndpi\n",
      "121594-1,2.ndpi\n",
      "121940-1,2.ndpi\n",
      "124488-1,2.ndpi\n",
      "125140-1.ndpi\n",
      "1300909-1,2.ndpi\n",
      "1303309-1303258.ndpi\n",
      "1306391-16.ndpi\n",
      "1306391-6,8.ndpi\n",
      "1306611-5,11.ndpi\n",
      "1307822-26,6.ndpi\n",
      "1307997-1,2.ndpi\n",
      "1308365-1308226.ndpi\n",
      "1400077-7,6.ndpi\n",
      "1401512-1,7.ndpi\n",
      "1401765-22.ndpi\n",
      "1401765-4,5.ndpi\n",
      "1402408-1402352.ndpi\n",
      "1402739-14,15.ndpi\n",
      "1402739-35.ndpi\n",
      "1402741-13,6.ndpi\n",
      "1403633-1.ndpi\n",
      "1404770-21.ndpi\n",
      "1404770-5,8.ndpi\n",
      "1406111-1.ndpi\n",
      "1406113-1,2.ndpi\n",
      "1406254-1,5.ndpi\n",
      "1406424-21,5.ndpi\n",
      "1406937-1,7.ndpi\n",
      "1407620.ndpi\n",
      "1408004-1,2.ndpi\n",
      "1408333-1,2.ndpi\n",
      "1408980-1,2.ndpi\n",
      "1409675-1,2.ndpi\n",
      "1412668-1,2.ndpi\n",
      "1501549-1501417.ndpi\n",
      "052144-21.ndpi\n",
      "052144-261.ndpi\n",
      "062496-31.ndpi\n",
      "062496-131.ndpi\n",
      "102023-61.ndpi\n",
      "082625-331.ndpi\n",
      "083370-15,61.ndpi\n",
      "083370-41.ndpi\n",
      "083787-12,151.ndpi\n",
      "083787-31.ndpi\n",
      "084377-7,101.ndpi\n",
      "084377-11.ndpi\n",
      "084395-41.ndpi\n",
      "093316-31.ndpi\n",
      "093316-101.ndpi\n",
      "093805-21.ndpi\n",
      "093805-131.ndpi\n",
      "094096-41.ndpi\n",
      "094096-181.ndpi\n",
      "094250-141.ndpi\n",
      "094250-251.ndpi\n",
      "094961-14,151.ndpi\n",
      "094961-21.ndpi\n",
      "094970-11,131.ndpi\n",
      "094970-171.ndpi\n",
      "095382-51.ndpi\n",
      "095382-111.ndpi\n",
      "100139-1,51.ndpi\n",
      "1413247-1,61.ndpi\n",
      "1413318-5,41.ndpi\n",
      "1413376-3,91.ndpi\n",
      "1413376-121.ndpi\n",
      "1506057-1,121.ndpi\n",
      "1515065-20,41.ndpi\n",
      "052512-41.ndpi\n",
      "052512-121.ndpi\n",
      "061344-31.ndpi\n",
      "061344-131.ndpi\n",
      "062772-41.ndpi\n",
      "062772-121.ndpi\n",
      "062772-131.ndpi\n",
      "063078-21.ndpi\n",
      "063078-171.ndpi\n",
      "074186-41.ndpi\n",
      "074186-91.ndpi\n",
      "074186-321.ndpi\n",
      "074735-51.ndpi\n",
      "074735-61.ndpi\n",
      "074735-141.ndpi\n",
      "102468-26,51.ndpi\n",
      "0956751.ndpi\n",
      "0977231.ndpi\n",
      "1261841.ndpi\n",
      "1300226-23,21.ndpi\n",
      "1407204-1,61.ndpi\n",
      "1408710-26,71.ndpi\n",
      "1411016-10,91.ndpi\n",
      "1411016-371.ndpi\n",
      "1411686-6,71.ndpi\n",
      "1413232-51.ndpi\n",
      "1413318-181.ndpi\n",
      "1508120-14,81.ndpi\n",
      "062496-171.ndpi\n",
      "076504-41.ndpi\n",
      "076504-301.ndpi\n",
      "081380-16,211.ndpi\n",
      "081380-31.ndpi\n",
      "081465-21,221.ndpi\n",
      "081465-41.ndpi\n",
      "081845-11.ndpi\n",
      "081845-151.ndpi\n",
      "082625-31.ndpi\n",
      "082625-291.ndpi\n",
      "125763,1257051.ndpi\n",
      "1301946-11.ndpi\n",
      "1302335-1,21.ndpi\n",
      "1303640-241.ndpi\n",
      "1305401,13053481.ndpi\n",
      "1305838-1,21.ndpi\n",
      "1308332-1,21.ndpi\n",
      "1308551-1,21.ndpi\n",
      "1308638-1,21.ndpi\n",
      "1310283,13102581.ndpi\n",
      "1311288,13112011.ndpi\n",
      "1311620,13115571.ndpi\n",
      "1400739-1,21.ndpi\n",
      "1400784,14006811.ndpi\n",
      "1400857,14008301.ndpi\n",
      "1405996-11.ndpi\n",
      "102151-241.ndpi\n",
      "102733-16,51.ndpi\n",
      "103047-31.ndpi\n",
      "103272-18,121.ndpi\n",
      "103807-21.ndpi\n",
      "103807-71.ndpi\n",
      "109038-21.ndpi\n",
      "116192-431.ndpi\n",
      "119393-91.ndpi\n",
      "122952-91.ndpi\n",
      "123968-33,241.ndpi\n",
      "123968-46,291.ndpi\n",
      "124428-23,61.ndpi\n",
      "127063-1,51.ndpi\n",
      "127924-3,71.ndpi\n",
      "127924-261.ndpi\n",
      "128640-5,81.ndpi\n",
      "128640-211.ndpi\n",
      "129607-6,71.ndpi\n",
      "1301429-22,81.ndpi\n",
      "1303640-4,61.ndpi\n",
      "1308784-22,101.ndpi\n",
      "1309863-6,101.ndpi\n",
      "1309863-181.ndpi\n",
      "1311292-33,111.ndpi\n",
      "1311292-81.ndpi\n",
      "1400077-31.ndpi\n",
      "1401763-5,101.ndpi\n",
      "1401763-361.ndpi\n",
      "18000821-IncUSN_FPE-1-FPESec_L1-1.ndpi\n",
      "19005019-IncUSN_FPE-1-FPESecL1-1.ndpi\n",
      "18000620-IncUSN_FPE-4-FPESec_L1-1.ndpi\n",
      "18000620-IncUSN_FPE-4-FPESec_L2-1.ndpi\n",
      "18000620-IncUSN_FPE-4-FPESec_L3-1.ndpi\n",
      "18000818-IncPosN_FPE-1-FPESec_L1-1.ndpi\n",
      "18000818-IncPosN_FPE-1-FPESec_L2-1.ndpi\n",
      "18000818-IncPosN_FPE-1-FPESec_L3-1.ndpi\n",
      "18000818-IncPosN_FPE-2-FPESec_L1-1.ndpi\n",
      "18000818-IncPosN_FPE-2-FPESec_L2-1.ndpi\n",
      "18000818-IncPosN_FPE-2-FPESec_L3-1.ndpi\n",
      "18000818-IncUSN_FPE-1-FPESec_L1-1.ndpi\n",
      "18000818-IncUSN_FPE-1-FPESec_L2-1.ndpi\n",
      "18000818-IncUSN_FPE-1-FPESec_L3-1.ndpi\n",
      "18000818-IncUSN_FPE-2-FPESec_L1-1.ndpi\n",
      "18000818-IncUSN_FPE-2-FPESec_L2-1.ndpi\n",
      "18000818-IncUSN_FPE-2-FPESec_L3-1.ndpi\n",
      "18000818-IncUSN_FPE-3-FPESec_L1-1.ndpi\n",
      "18000818-IncUSN_FPE-3-FPESec_L2-1.ndpi\n",
      "18000818-IncUSN_FPE-3-FPESec_L3-1.ndpi\n",
      "18000821-IncUSN_FPE-1-FPESec_L2-1.ndpi\n",
      "18000821-IncUSN_FPE-1-FPESec_L3-1.ndpi\n",
      "18000821-IncUSN_FPE-4-FPESec_L1-1.ndpi\n",
      "18000821-IncUSN_FPE-4-FPESec_L2-1.ndpi\n",
      "18000821-IncUSN_FPE-4-FPESec_L3-1.ndpi\n",
      "19004804-IncUSN_FPE-1-FPESec_L1-1.ndpi\n",
      "19004804-IncUSN_FPE-1-FPESec_L2-1.ndpi\n",
      "19004804-IncUSN_FPE-1-FPESec_L3-1.ndpi\n",
      "19004804-IncUSN_FPE-2-FPESec_L1+2-1.ndpi\n",
      "19004804-IncUSN_FPE-2-FPESec_L3-1.ndpi\n",
      "19004804-IncUSN_FPE-3-FPESec_L1-1.ndpi\n",
      "19004804-IncUSN_FPE-3-FPESec_L2-1.ndpi\n",
      "19004804-IncUSN_FPE-3-FPESec_L3-1.ndpi\n",
      "19005019-IncUSN_FPE-1-FPESecL2-1.ndpi\n",
      "19005019-IncUSN_FPE-1-FPESecL3-1.ndpi\n",
      "19005019-IncUSN_FPE-2-FPESecL1-1.ndpi\n",
      "19005019-IncUSN_FPE-2-FPESecL2-1.ndpi\n",
      "19005019-IncUSN_FPE-2-FPESecL3-1.ndpi\n",
      "19005306-IncUSN_FPE-1-FPESec_L1-1.ndpi\n",
      "19005306-IncUSN_FPE-1-FPESec_L2-1.ndpi\n",
      "19005306-IncUSN_FPE-1-FPESec_L3-1.ndpi\n",
      "19005306-IncUSN_FPE-2-FPESec_L1+2-1.ndpi\n",
      "19005306-IncUSN_FPE-2-FPESec_L3-1.ndpi\n",
      "90405_01_LR.ndpi\n",
      "90405_02_R.ndpi\n",
      "90653_02_R.ndpi\n",
      "90670_01_LR.ndpi\n",
      "100042_01_LR.ndpi\n",
      "100042_02_R.ndpi\n",
      "100188_01_R.ndpi\n",
      "100229_01_LR.ndpi\n",
      "100229_02_R.ndpi\n",
      "100237_01_LR.ndpi\n",
      "100237_02_R.ndpi\n",
      "100246_01_LR.ndpi\n",
      "100246_02_R.ndpi\n",
      "U_90157_19_F_NA_12_L1.ndpi\n",
      "U_90333_8_B_LOW_8_L1.ndpi\n",
      "U_100188_15_B_NA_15_L1.ndpi\n",
      "U_100246_5_X_LOW_5_L1.ndpi\n",
      "U_100246_10_B_LOW_10_L1.ndpi\n",
      "90112_01_LR.ndpi\n",
      "90112_02_R.ndpi\n",
      "90157_01_LR_and_R.ndpi\n",
      "90163_01_LR.ndpi\n",
      "90238_01_LR_and_R.ndpi\n",
      "90264_02_R.ndpi\n",
      "90364_02_R.ndpi\n",
      "90385_01_LR.ndpi\n",
      "90385_02_R.ndpi\n",
      "all photos stored in folder\n"
     ]
    }
   ],
   "source": [
    "# Define the output folder\n",
    "output_folder = \"/path_to_output_folder\"\n",
    "\n",
    "# Zip the name and openslide_paths lists together\n",
    "# Iterate through the names and openslide_paths\n",
    "for name, openslide_path in zip(names, openslide_paths):\n",
    "    \n",
    "    # Define a variable \"thumbnail\" (small picture) to store the image at level 6\n",
    "    thumbnail = openslide_path.get_thumbnail(openslide_path.level_dimensions[6])\n",
    "    thumbnail = np.array(thumbnail.convert('RGB'))  # Convert to RGB format\n",
    "    \n",
    "    # Contouring using the get_lymphnode_contours function\n",
    "    contours = get_lymphnode_contours(thumbnail)\n",
    "    \n",
    "    # Draw contours on the image\n",
    "    slide_annotated = cv2.drawContours(thumbnail, contours, -1, (0, 0, 255), 3)  # Red color, 3-pixel thickness\n",
    "    \n",
    "    # Save the images as PNG files in the output folder\n",
    "    image_path = os.path.join(output_folder, f'{name}.png')\n",
    "    cv2.imwrite(image_path, slide_annotated)\n",
    "    \n",
    "    # Print the name of the processed image\n",
    "    print(name)\n",
    "\n",
    "# Print a message indicating that all photos are stored in the folder\n",
    "print(\"All photos stored in the folder\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "LN-env",
   "language": "python",
   "name": "ln-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
